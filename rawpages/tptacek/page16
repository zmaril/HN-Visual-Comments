<html><head><link rel="stylesheet" type="text/css" href="http://ycombinator.com/news.css">
<link rel="shortcut icon" href="http://ycombinator.com/favicon.ico">
<script>
function byId(id) {
  return document.getElementById(id);
}

function vote(node) {
  var v = node.id.split(/_/);   // {'up', '123'}
  var item = v[1]; 

  // hide arrows
  byId('up_'   + item).style.visibility = 'hidden';
  byId('down_' + item).style.visibility = 'hidden';

  // ping server
  var ping = new Image();
  ping.src = node.href;

  return false; // cancel browser nav
} </script><title>tptacek's comments | Hacker News</title></head><body><center><table border=0 cellpadding=0 cellspacing=0 width="85%" bgcolor=#f6f6ef><tr><td bgcolor=#ff6600><table border=0 cellpadding=0 cellspacing=0 width="100%" style="padding:2px"><tr><td style="width:18px;padding-right:4px"><a href="http://ycombinator.com"><img src="http://ycombinator.com/images/y18.gif" width=18 height=18 style="border:1px #ffffff solid;"></img></a></td><td style="line-height:12pt; height:10px;"><span class="pagetop"><b><a href="news">Hacker News</a></b><img src="http://ycombinator.com/images/s.gif" height=1 width=10><a href="newest">new</a> | <a href="newcomments">comments</a> | <a href="ask">ask</a> | <a href="jobs">jobs</a> | <a href="submit">submit</a> | <font color=#ffffff>tptacek's comments</font></span></td><td style="text-align:right;padding-right:4px;"><span class="pagetop"><a href="newslogin?whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50">login</a></span></td></tr></table></td></tr><tr style="height:10px"></tr><tr><td><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3410188 href="vote?for=3410188&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410188></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3410188">link</a> | <a href="item?id=3410161">parent</a> | on: <a href="item?id=3409906">Apple design chief Jonathan Ive awarded knighthood</a></span></div><br>
<span class="comment"><font color=#000000>I'm guessing two things from this comment.<p>(1) You are a computer programmer.<p>(2) You are not British.<p>Am I right about either of them? I hope so. I upvoted you in sympathy. :)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3410239 href="vote?for=3410239&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410239></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=grandalf">grandalf</a> 36 days ago  | <a href="item?id=3410239">link</a></span></div><br>
<span class="comment"><font color=#000000>You are correct.  I have nothing against the British government or the Church of Scientology, but I do think titles of nobility are bizarre and a reminder of our civilization's dark past.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3410288 href="vote?for=3410288&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410288></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sliverstorm">sliverstorm</a> 36 days ago  | <a href="item?id=3410288">link</a></span></div><br>
<span class="comment"><font color=#000000>Do they really differ from the titles we use in the USA? "Senator" Bush. "Mr. President" (every president past and present)<p>"Sir" is no more a title of nobility (today) than any of those.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3410417 href="vote?for=3410417&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410417></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=grandalf">grandalf</a> 36 days ago  | <a href="item?id=3410417">link</a></span></div><br>
<span class="comment"><font color=#000000>You would have to be the biggest cynic in the world about democracy to think there is no difference between an elected senator and a monarchic (hereditary) title of nobility.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3410657 href="vote?for=3410657&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410657></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=ErrantX">ErrantX</a> 36 days ago  | <a href="item?id=3410657">link</a></span></div><br>
<span class="comment"><font color=#000000>FWIW KBE's are not hereditary titles :-) he can't pass it on.<p>Here in the UK it is nowadays largely recognised as part of a larger (including OBE and MBE etc.) merit system recognising achievement. A national honour roll.<p>Now if we were talking about hereditary lordships...</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3417246 href="vote?for=3417246&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3417246></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=stevecooperorg">stevecooperorg</a> 34 days ago  | <a href="item?id=3417246">link</a></span></div><br>
<span class="comment"><font color=#000000>I think there's been a historical shift in what the word 'Knighthood' means.<p>The knighthoods discussed here are earned and given for different public goods -- charity, business, entertainment, etc. Current Knights include Sir Elton John, Sir Paul McCartney, and Sir Richard Branson. It's not heritable or noble, although of course the origins of the word itself are.<p>(Interestingly, 'Senator' has undergone the same historical shift -- it refers originally to the hereditary nobles who ran the Roman Empire. It's just managed to get away from the aristocratic origins. As have terms like 'Drugs Czar')<p>It is the case that it's the Queen who awards these titles, but in the UK almost everything does, officially -- she's a symbolic figurehead -- the powerless root node of the tree of government, if you like.<p>Does the US have any kind of equivalent system of recognition? France has the LÃ©gion d'Honneur, for instance, which is a non-aristocratic, republican order of merit.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3410696 href="vote?for=3410696&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410696></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=megablast">megablast</a> 36 days ago  | <a href="item?id=3410696">link</a></span></div><br>
<span class="comment"><font color=#000000>It is almost as if you are trying not to understand, and just want to lash out at this, no matter what.<p>Yes, it is a title, nothing more, nothing huge, almost completely meaningless.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3411260 href="vote?for=3411260&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411260></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=grandalf">grandalf</a> 36 days ago  | <a href="item?id=3411260">link</a></span></div><br>
<span class="comment"><font color=#000000>That's my point, it' meaningless.  That modern humans think it's a big deal is the scary part.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=240></td><td valign=top><center><a id=up_3411570 href="vote?for=3411570&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411570></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sliverstorm">sliverstorm</a> 36 days ago  | <a href="item?id=3411570">link</a></span></div><br>
<span class="comment"><font color=#000000>Yet you are the one sounding the war drums.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=280></td><td valign=top><center><a id=up_3411638 href="vote?for=3411638&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411638></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=grandalf">grandalf</a> 36 days ago  | <a href="item?id=3411638">link</a></span></div><br>
<span class="comment"><font color=#000000>Just trying to correct for the very common pro government bias.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3410113 href="vote?for=3410113&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410113></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3410113">link</a> | <a href="item?id=3410092">parent</a> | on: <a href="item?id=3409751">Xcode 4 ships a buggy compiler</a></span></div><br>
<span class="comment"><font color=#000000>Which, it's not remotely a stupid question: malloc gets passed a zero-length argument when it's used to allocate variable length data. That malloc(0) works and is handled by free() without crashing the program is a simplifying assumption, as is the assumption that free(NULL) won't corrupt the heap.<p><i>Any</i> use of alloca() on the other hand seems risky. Similar arguments could be made about the semantics of jmp_bufs, which also get used to get a handle on the stack.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3410995 href="vote?for=3410995&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410995></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=mikeash">mikeash</a> 36 days ago  | <a href="item?id=3410995">link</a></span></div><br>
<span class="comment"><font color=#000000>"the assumption that free(NULL) won't corrupt the heap."<p>That's not an assumption, that's how the free() function is defined to work by the language standard. It never ceases to astound me how many otherwise good C programmers think free(NULL) is an error.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3411106 href="vote?for=3411106&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411106></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3411106">link</a></span></div><br>
<span class="comment"><font color=#000000>... yes, that's what I'm saying.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3411116 href="vote?for=3411116&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411116></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=mikeash">mikeash</a> 36 days ago  | <a href="item?id=3411116">link</a></span></div><br>
<span class="comment"><font color=#000000>I see. The word "assumption" confused me, as in context it would generally mean something that isn't necessarily true.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3410500 href="vote?for=3410500&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410500></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=nitrogen">nitrogen</a> 36 days ago  | <a href="item?id=3410500">link</a></span></div><br>
<span class="comment"><font color=#000000><i>as is the assumption that free(NULL) won't corrupt the heap.</i><p>When you refer to simplifying assumptions, are you talking about assumptions made by the programmer, or by the compiler and libc?  For example, the POSIX manual page[0] for free( void* ptr ) says, "If ptr is a null pointer, no action shall occur."  The malloc manpage says, "If size is 0, either a null pointer or a unique pointer that can successfully passed to free() shall be returned."  That sounds more like a definition than an assumption to me.  What am I missing?<p>[0] Obtained by installing manpages-posix-dev on Ubuntu and running <i>man 3posix free</i>.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3409763 href="vote?for=3409763&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409763></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3409763">link</a> | <a href="item?id=3409335">parent</a> | on: <a href="item?id=3409171">Why do C++ folks make things so complicated?</a></span></div><br>
<span class="comment"><font color=#000000>"Most of the time you just cargo cult examples from the documentation". Yes. This.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3409775 href="vote?for=3409775&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409775></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=rubashov">rubashov</a> 36 days ago  | <a href="item?id=3409775">link</a></span></div><br>
<span class="comment"><font color=#000000>That's how any API is used 90% of the time.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3409777 href="vote?for=3409777&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409777></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3409777">link</a></span></div><br>
<span class="comment"><font color=#000000>Disagree. And, tip: don't say that at a job interview.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3409795 href="vote?for=3409795&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409795></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=rubashov">rubashov</a> 36 days ago  | <a href="item?id=3409795">link</a></span></div><br>
<span class="comment"><font color=#000000>Tip: don't be a glib, smug prick on a date.<p>Please enunciate why something like asio is evil. You review the documentation and examples and the outlined primary use cases "just work". But you can dive in and do really complicated things.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3410146 href="vote?for=3410146&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410146></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3410146">link</a></span></div><br>
<span class="comment"><font color=#000000>I don't think any of Boost is "evil", and I haven't mentioned asio --- asio came out after I was done using Boost. But I agree with you that a lot of C++ code works because it's part of a cargo-cult culture, not because the interfaces themselves are particularly well- thought- out.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3409761 href="vote?for=3409761&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409761></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3409761">link</a> | <a href="item?id=3409714">parent</a> | on: <a href="item?id=3409171">Why do C++ folks make things so complicated?</a></span></div><br>
<span class="comment"><font color=#000000>And maybe they shouldn't like shared_ptr so much! It's a source of memory lifecycle bugs; everything touched by shared_ptr needs to be under the shared_ptr regime or carefully bridged to it.<p>boost::bind seems more like evidence in the case against C++ than an advertisement for boost.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3409827 href="vote?for=3409827&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409827></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=timr">timr</a> 36 days ago  | <a href="item?id=3409827">link</a></span></div><br>
<span class="comment"><font color=#000000><i>"everything touched by shared_ptr needs to be under the shared_ptr regime or carefully bridged to it"</i><p>Well, yes.  That's sort of the point.  You can write old-style C++, or your can write modern C++, but the library designers are trying to make you think carefully when you're doing <i>both</i>, because that <i>is</i> a source of memory lifecycle bugs.  Using the boost (now standard) pointers universally tends to dramatically reduce the chances of memory-related bugs in C++ code.<p>Not using shared_ptr is a code smell.  Sometimes you have to do it, but if you're avoiding the use of the smart pointer classes in blue sky code, you're doing something wrong.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3410165 href="vote?for=3410165&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410165></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=alexgartrell">alexgartrell</a> 36 days ago  | <a href="item?id=3410165">link</a></span></div><br>
<span class="comment"><font color=#000000>The main thing that sucks about shared_ptr's is that they break C++'s limited support for covariance.  For example<p><pre><code>  class A { ... };
  class B : public A { ... };

  // Totally works
  class AFactory {
   public:
    virtual A* makeOne();
  }
  class BFactory : public AFactory {
   public:
    virtual B* makeOne();
  }

  // totally doesn't
  class SharedAFactory {
   public:
    virtual boost::shared_ptr&#60;A&#62; makeOne();
  };
  class SharedBFactory {
   public:
    virtual boost::shared_ptr&#60;B&#62; makeOne();
  };
</code></pre>
Also, from a performance perspective, locking the memory bus to do atomic operations on a shared_ptr totally blows when you're expected to turn a request around in a few microseconds.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3410325 href="vote?for=3410325&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410325></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=timr">timr</a> 36 days ago  | <a href="item?id=3410325">link</a></span></div><br>
<span class="comment"><font color=#000000>I'll grant you the larger point that inferring relationships by template value type can be a pain.  But this example is kind of bad.  First off, I assume you meant to derive SharedBFactory from SharedAFactory?  Otherwise, it works fine.<p>If not, the only problem here is that C++ won't let you have a virtual function override that only differs by return type.  And since it can't tell that shared_ptr&#60;A&#62; and shared_ptr&#60;B&#62; are related by value_type, it complains (this is the larger point that I granted you earlier).  But the type theatrics are hiding a bigger problem....<p>In this example, you can either fix the type error by making makeOne() return a boost::shared_ptr&#60;A&#62; in all factories (in which case, you <i>really do</i> want a polymorphic interface), or you can make a new function that returns a different pointer type (in which case, you don't).  The type system here is doing you a favor, and telling you that your design is bogus -- you shouldn't be creating a polymorphic factory interface that returns different types (because that isn't actually polymorphic, is it?)<p>This isn't totally academic:  I find that in nearly all type-error situations like this one, the real problem can be traced back to sloppy coding.<p><i>"locking the memory bus to do atomic operations on a shared_ptr totally blows when you're expected to turn a request around in a few microseconds."</i><p>There's always a cost to reference counting, and therefore, it's not always appropriate.  That said, the only time you should be triggering atomic operations are on pointer copies and allocations.  If you're doing allocations per request, kiss your microsecond response time goodbye -- the reference count overhead is the least of your worries.  And you can avoid unnecessary pointer copies by passing shared_ptr&#60;&#62; objects by reference.  With a small amount of care, it's possible to reduce shared_ptr&#60;&#62; overhead to essentially zero.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3411252 href="vote?for=3411252&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411252></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=MatthewCampbell">MatthewCampbell</a> 36 days ago  | <a href="item?id=3411252">link</a></span></div><br>
<span class="comment"><font color=#000000>Their polymorphic factory isn't returning "different types." They're both returning A. The derived one is just returning a specific type of A. If the shared "makeOne" returned naked pointer types A* and B* rather than shared_ptr, then this would all work correctly, thanks to C++'s covariant return type support.<p>Covariant return types are a powerful feature in a language that doesn't support other forms of return type polymorphism. shared_ptrs function so similarly to pointers that it can be surprising when they don't support this behavior. Surprise and capability mismatch with pointers <i>are</i> strikes against shared_ptr. But not sufficient ones to stop me from using them.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3411703 href="vote?for=3411703&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411703></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=timr">timr</a> 36 days ago  | <a href="item?id=3411703">link</a></span></div><br>
<span class="comment"><font color=#000000><i>"Their polymorphic factory isn't returning "different types." They're both returning A."</i><p>No, they're not.  One is returning a pointer to A, and the other is returning a pointer to B (which just happens to be a subclass of A).  It matters, and just because you <i>can</i> do it with a naked pointer doesn't mean that you <i>should</i>.  The problem you've described is a code smell.<p>If I hand you a pointer to B, you (client code) can do everything that is exposed by B.  If I hand you a pointer to A, you can only do the set of things exposed by A.  And that's a fundamentally different interface guarantee.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=240></td><td valign=top><center><a id=up_3411815 href="vote?for=3411815&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411815></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=MatthewCampbell">MatthewCampbell</a> 36 days ago  | <a href="item?id=3411815">link</a></span></div><br>
<span class="comment"><font color=#000000>There are cases where covariant return types are abused, so it's fine that you treat it as a code smell. However, C++ does make them necessary for several valid patterns. This does include alexgartrell's example, but here's a popular one:<p>I have a polymorphic type that should be copyable. Because of the limitations of C++ copy constructors and operators, my only option is to expose a virtual method (call it "copy"). The non-smelly semantics we want are such that if you call "copy" on an object, you get an identical copy of the same type. So if you call "copy" on a pointer of type A, you get an A. Call it on a B, you get a B.<p>The contract itself is polymorphic. It doesn't commit to returning any particular flavor of A.<p>We can implement this method if we return naked pointers. But if we want to be safe and return a smart pointer, we have to introduce dynamic casting or other worse smells.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=280></td><td valign=top><center><a id=up_3412243 href="vote?for=3412243&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3412243></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=timr">timr</a> 35 days ago  | <a href="item?id=3412243">link</a></span></div><br>
<span class="comment"><font color=#000000><i>"I have a polymorphic type that should be copyable. Because of the limitations of C++ copy constructors and operators, my only option is to expose a virtual method (call it "copy"). The non-smelly semantics we want are such that if you call "copy" on an object, you get an identical copy of the same type."</i><p>Well, yeah...because those semantics are just as smelly as the one you described before.  What you describe isn't a copy constructor at all, and trying to make a copy constructor do what you want is a dangerous thing. A "constructor" that takes any subclass of class A and returns an instance of that subclass is inherently brittle: add a new subclass of A, and you've got to update the "constructor" to know about the new type.  On top of that, your "constructor" has to introspect into the type to determine what to initialize when, and that's slow.<p>There are easy ways to get the behavior your want (e.g. make a template function that calls the appropriate class' copy constructor, or -- closest to what you want -- make a template copy constructor function on the class itself), but complaining that you can't make a bog-standard copy constructor do polymorphic construction kind of misses the point.<p>Here's a better discussion of the problem than I have the space to go into here:<p><a href="http://www.jaggersoft.com/pubs/oload24.html" rel="nofollow">http://www.jaggersoft.com/pubs/oload24.html</a></font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=320></td><td valign=top><center><a id=up_3413425 href="vote?for=3413425&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3413425></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=MatthewCampbell">MatthewCampbell</a> 35 days ago  | <a href="item?id=3413425">link</a></span></div><br>
<span class="comment"><font color=#000000>We're going too deep into this, for alexgartrell's relatively simple claim that covariant return types have a reason for being in the language, and that smart pointers omit that capability.<p>But just to clarify: no base class implementation is aware of derived classes in the copying case, so your smell doesn't exist. See Scott Meyers' "virtual copy constructor" snippet half way down the page:
<a href="http://books.google.com/books?id=azvE8V0c-mYC&#38;lpg=PT159&#38;ots=46cf4cGhZg&#38;pg=PT158#v=onepage&#38;q&#38;f=false" rel="nofollow">http://books.google.com/books?id=azvE8V0c-mYC&#38;lpg=PT159&...</a><p>You can't do it that neatly without covariant return types. Ergo, you can't do that while returning safe, smart pointers.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3411284 href="vote?for=3411284&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3411284></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zvrba">zvrba</a> 36 days ago  | <a href="item?id=3411284">link</a></span></div><br>
<span class="comment"><font color=#000000>I'm tired of marketing boost as "modern C++". Alexei Alexandrescu, the author of "Modern C++ design" book has since gone on greener pastures and got involved with the D language.  He participated in the design of D, and wrote a book about it.<p>Not using shared_ptr a code smell? If you're not able to keep track of your objects yourself, you should not be using C or C++. It's not that hard like you would like us believe.<p>Also, apart from the cost of maintaining reference counts, shared_ptr makes an extra allocation for the control block. Unless you take care and use make_shared, you end up with allocations that are twice as slow.<p>On a cynical side: Boost has become Dave Abrahams' business (1)  He (and co.) have a vested interest in making you believe that the Boost-way is "the" way of writing "modern" (as defined by HIM and his followers) C++ code. I just wonder whether he had that much foresight, or just took the chance when he saw the opportunity.<p>(1) I remember once asking about obtaining slides about fusion from a past BoostCon conference and got a blank "no". Slides were available only to the people who paid to attend the conference.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3412159 href="vote?for=3412159&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3412159></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=timr">timr</a> 35 days ago  | <a href="item?id=3412159">link</a></span></div><br>
<span class="comment"><font color=#000000><i>"Not using shared_ptr a code smell?"</i><p>Yes.  It's part of the C++ standard.  All rants against Dave Abrahams and Boost aside, not using the standard library to do standard things is a code smell.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3417317 href="vote?for=3417317&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3417317></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zvrba">zvrba</a> 34 days ago  | <a href="item?id=3417317">link</a></span></div><br>
<span class="comment"><font color=#000000>What "standard things"? shared_ptr is only <i>one</i> of many possible ways to keep track of object lifetimes. Rolling your own reference-counted smart pointer might be a code smell, but not choosing reference counting is far from that.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3410149 href="vote?for=3410149&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410149></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3410149">link</a></span></div><br>
<span class="comment"><font color=#000000>This breaks down as soon as you have to integrate 3rd party code.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3410297 href="vote?for=3410297&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410297></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=timr">timr</a> 36 days ago  | <a href="item?id=3410297">link</a></span></div><br>
<span class="comment"><font color=#000000>It doesn't "break"...you just have to think about what you're doing.  Which, again, is the point.<p>If some external code is passing you pointers, then using shared_ptr is exactly the <i>wrong</i> thing to do, because you (presumably) don't own the memory.  And if you <i>do</i> own the memory, there's no problem putting it in a shared_ptr.  The fact that you can't blindly stuff everything into a shared_ptr is a feature, not a bug.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3409782 href="vote?for=3409782&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409782></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jules">jules</a> 36 days ago  | <a href="item?id=3409782">link</a></span></div><br>
<span class="comment"><font color=#000000>If your program fits the *_ptr mold (i.e. no unbreakable cycles) and you use it consistently it does tend to be nice. Almost like having automatic memory management.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3409757 href="vote?for=3409757&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409757></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3409757">link</a> | <a href="item?id=3409574">parent</a> | on: <a href="item?id=3409171">Why do C++ folks make things so complicated?</a></span></div><br>
<span class="comment"><font color=#000000>Couldn't disagree more about Boost. There are simple, elegant parts of Boost, and then there are incredibly complicated parts <i>of Boost</i>. Some of those complex parts also happen to be powerful (like Boost graphs). Spirit is perhaps an example of a part of Boost that doesn't justify its prolixity; Boost::Function another, and a case where C++ is really what's to blame.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3409743 href="vote?for=3409743&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409743></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3409743">link</a> | <a href="item?id=3409171">parent</a> | on: <a href="item?id=3409171">Why do C++ folks make things so complicated?</a></span></div><br>
<span class="comment"><font color=#000000>Nit: OS X is not written in C++. Small parts of it are, but most of xnu is C. C is simple. C++ is not.<p>Having said that: TR1 regexes seem like an uncommonly simple C++ API.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3409508 href="vote?for=3409508&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409508></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3409508">link</a> | <a href="item?id=3409447">parent</a> | on: <a href="item?id=3407436">Ron Paul speaks against SOPA</a></span></div><br>
<span class="comment"><font color=#000000>The site has guidelines. Please reread them.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3410298 href="vote?for=3410298&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410298></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=lawnchair_larry">lawnchair_larry</a> 36 days ago  | <a href="item?id=3410298">link</a></span></div><br>
<span class="comment"><font color=#737373>It's confusing that you would direct posters to the guidelines while willfully disregarding the guidelines yourself, and call the guidelines "stupid."<p><a href="https://news.ycombinator.com/item?id=3405357" rel="nofollow">https://news.ycombinator.com/item?id=3405357</a></font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3410374 href="vote?for=3410374&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410374></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3410374">link</a></span></div><br>
<span class="comment"><font color=#000000>The guideline I'm referring to here is not stupid.<p>The "don't comment about flagging" guideline is. It's meant to eliminate pointless arguments about what is or isn't germane to the site, much like how you're asked not to comment about being downvoted. But flags are invisible, and the number of people flagging is dwarfed by the number of people upvoting threads about Ron Paul's newsletters, so that the only way for it to leave the front page of the site (precipitously, if you didn't notice) is admin intervention.<p>Commenting on this post in the first place was stupid, since the story already got buried. I just felt bad for 'davidw, and I'm a nerd, so when someone says "I think HN is in fact a great place to talk about politics", it's hard for me to resist commenting that it's <i>by charter</i> not a place to talk about politics.<p>I'm answering in detail because you seem to follow my comments, and I don't want you to think I'm blowing you off. I'm not. I don't know you or have any problem with you personally.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3409249 href="vote?for=3409249&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409249></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 37 days ago  | <a href="item?id=3409249">link</a> | <a href="item?id=3409215">parent</a> | on: <a href="item?id=3409135">The Magna Carta Essay</a></span></div><br>
<span class="comment"><font color=#000000>What, you mean the Magna Carta wasn't in part a reaction to the economics of the thriving trade in duck feathers?</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3409265 href="vote?for=3409265&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409265></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=drivingmenuts">drivingmenuts</a> 37 days ago  | <a href="item?id=3409265">link</a></span></div><br>
<span class="comment"><font color=#000000>Pssshh. The real money was in manure.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3409052 href="vote?for=3409052&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409052></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 37 days ago  | <a href="item?id=3409052">link</a> | <a href="item?id=3408859">parent</a> | on: <a href="item?id=3407777">The lost Van Jacobson paper that could save the In...</a></span></div><br>
<span class="comment"><font color=#000000>I stupidly downvoted you (SOPA! GAH!) but you made a good point, so, sorry.<p>Generally one of the reasons I don't freak out about laws regulating the Internet is that the Internet as we know it today is rickety anyways.<p>In the last 10 years we've seen the monumental shift (predicted in the late '90s but widely scoffed at) from ad hoc network protocols and native client/server implementations to a common web platform. Nerds still recoil a little at this, thinking about the native/ad-hoc stuff they still use (like Skype), but if you look at the industry as a whole, particularly in the line-of-business software development that actually dominates the field, it's all web now. TCP ports are mostly irrelevant. If you were going to start a new app today, would it be a native implementation of a custom protocol? Probably not!<p>One of the things that got us to this state was in fact regulatory: default firewall configurations that don't allow anything but web out, and disallow arbitrary inbound connections.<p>Over the next 10-15 years, I'm hoping we'll get similar nudges away from first-class addressing only for machines (which are less and less useful as an abstraction for completing tasks using technology) and towards first-class addressing for subjects, interests, content, &#38;c. This is an insight <i>lots</i> of people have had, from David Cheriton &#38; TIBCO in the '90s through the RON work at MIT through VJ's work at PARC &#38; so on.<p>I wrote off Lessig for a bunch of years after reading _Code_, but I think he fundamentally has it right in the sense that implementors have as powerful a say in how things are going to be regulated as legislators do. America had the Constitutional Convention after the Articles stopped scaling; the Internet will have little blips of architectural reconsideration when the impedance between the technology and what people want to legitimately do with the technology gets too high.<p>(I'm trying to make a technical point here, not a political one; I support copyright, and am ambivalent about SOPA.)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3410012 href="vote?for=3410012&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410012></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=listening">listening</a> 36 days ago  | <a href="item?id=3410012">link</a></span></div><br>
<span class="comment"><font color=#000000>With the widespread use of anycast, does "first class addressing for machines" even matter any more?<p>In situations where anycast is used, how do you even know what machine a given address to connecting to?<p>RON was a step in the right direction, imo.  With small overlays, MAC addressing comes into play and it becomes a little easier to know what machines (not simply what "addresses") you are really connected to.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3410023 href="vote?for=3410023&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410023></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3410023">link</a></span></div><br>
<span class="comment"><font color=#000000>Yes, because conceptually you're still talking to a computer (it just happens to be a globally load balanced computer). It's still the unicast service model, and it's still fundamentally about building a channel between two operating systems.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3410171 href="vote?for=3410171&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410171></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=listening">listening</a> 36 days ago  | <a href="item?id=3410171">link</a></span></div><br>
<span class="comment"><font color=#000000>Imagine if you dialled a full telephone number, including applicable country code and local regional code, and depending on where you were dialling from, you reached a different telephone in a different geographical location.<p>As long as it's an answering machine and the message is the same at every telephone reached by this number, it does not matter.<p>But as soon as you want to reach a live person, and not simply "content", then what?<p>Is end-to-end about accessing "content" or is it about communicating with someone operating another computer?</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3410187 href="vote?for=3410187&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410187></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 36 days ago  | <a href="item?id=3410187">link</a></span></div><br>
<span class="comment"><font color=#000000>I wouldn't want to noodle on this too much. I take your point. Anycast abstracts away some of the notion that you're talking to a specific computer. But the unicast service model is inherently about computers talking to each other. Many, maybe most, of the most important Internet applications aren't about 1-1 conversations, or if they are, they're 1-1 conversations in special cases of systems that also work 1-many.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3410450 href="vote?for=3410450&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3410450></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=listening">listening</a> 36 days ago  | <a href="item?id=3410450">link</a></span></div><br>
<span class="comment"><font color=#000000>Importance is a subjective concept.<p>One opinion is that a very important Internet application will inevitably be 1-1.<p>Who did the FCC just hire as their new CTO?  What is happening to POTS?<p>1-to-many systems, hacked to give an illusion of 1-1 conversations, e.g. smtp middlemen, social networking's http servers or twitter-like broadcast sms, are what we settle for today, but, imo, this is a limitation not a desired goal.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3409005 href="vote?for=3409005&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%59%36%74%43%38%32%6c%6d%72%50"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3409005></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 37 days ago  | <a href="item?id=3409005">link</a> | <a href="item?id=3408927">parent</a> | on: <a href="item?id=3407777">The lost Van Jacobson paper that could save the In...</a></span></div><br>
<span class="comment"><font color=#000000>I had been thinking of:<p><a href="http://cseweb.ucsd.edu/~savage/papers/CCR99.pdf" rel="nofollow">http://cseweb.ucsd.edu/~savage/papers/CCR99.pdf</a><p>(And Nate's right, I drastically oversimplified my summary of it). This is "cheating TCP" by Stefan Savage from '99. A great, great paper.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr style="height:10px"></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td><img src="http://ycombinator.com/images/s.gif" height=1 width=14></td><td class="title"><a href="/x?fnid=ryl2E7D50A" rel="nofollow">More</a></td></tr></table></td></tr></td></tr><tr><td><img src="http://ycombinator.com/images/s.gif" height=10 width=0><table width="100%" cellspacing=0 cellpadding=1><tr><td bgcolor=#ff6600></td></tr></table><br>
<center><span class="yclinks"><a href="lists">Lists</a> | <a href="rss">RSS</a> | <a href="http://ycombinator.com/bookmarklet.html">Bookmarklet</a> | <a href="http://ycombinator.com/newsguidelines.html">Guidelines</a> | <a href="http://ycombinator.com/newsfaq.html">FAQ</a> | <a href="http://ycombinator.com/newsnews.html">News News</a> | <a href="item?id=363">Feature Requests</a> | <a href="http://ycombinator.com">Y Combinator</a> | <a href="http://ycombinator.com/apply.html">Apply</a> | <a href="http://ycombinator.com/lib.html">Library</a></span><br><br>
<form method=get action="http://www.hnsearch.com/search#request/all">Search: <input type=text name="q" value="" size=17></form><br>
</center></td></tr></table></center></body></html>