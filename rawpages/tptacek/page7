<html><head><link rel="stylesheet" type="text/css" href="http://ycombinator.com/news.css">
<link rel="shortcut icon" href="http://ycombinator.com/favicon.ico">
<script>
function byId(id) {
  return document.getElementById(id);
}

function vote(node) {
  var v = node.id.split(/_/);   // {'up', '123'}
  var item = v[1]; 

  // hide arrows
  byId('up_'   + item).style.visibility = 'hidden';
  byId('down_' + item).style.visibility = 'hidden';

  // ping server
  var ping = new Image();
  ping.src = node.href;

  return false; // cancel browser nav
} </script><title>tptacek's comments | Hacker News</title></head><body><center><table border=0 cellpadding=0 cellspacing=0 width="85%" bgcolor=#f6f6ef><tr><td bgcolor=#ff6600><table border=0 cellpadding=0 cellspacing=0 width="100%" style="padding:2px"><tr><td style="width:18px;padding-right:4px"><a href="http://ycombinator.com"><img src="http://ycombinator.com/images/y18.gif" width=18 height=18 style="border:1px #ffffff solid;"></img></a></td><td style="line-height:12pt; height:10px;"><span class="pagetop"><b><a href="news">Hacker News</a></b><img src="http://ycombinator.com/images/s.gif" height=1 width=10><a href="newest">new</a> | <a href="newcomments">comments</a> | <a href="ask">ask</a> | <a href="jobs">jobs</a> | <a href="submit">submit</a> | <font color=#ffffff>tptacek's comments</font></span></td><td style="text-align:right;padding-right:4px;"><span class="pagetop"><a href="newslogin?whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43">login</a></span></td></tr></table></td></tr><tr style="height:10px"></tr><tr><td><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3450646 href="vote?for=3450646&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450646></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3450646">link</a> | <a href="item?id=3450473">parent</a> | on: <a href="item?id=3448573">Deconstructing "K&R C"</a></span></div><br>
<span class="comment"><font color=#000000>High level string libraries are a win.<p>But you may be overstating your case a bit.<p>From my codebase/third-party directory on my laptop (a bit random, I admit), from those projects I'd consider "competent C" (ie, not OpenSSL or MRI ruby):<p>* dovecot uses ASCIIZ strings and libc string functions<p>* redis uses ASCIIZ strings and libc string functions<p>* nginx uses a high-level buffered string library<p>* lcamtuf's skipfish scanner uses ASCIIZ strings and libc string functions<p>* libevent uses ASCIIZ strings and libc string functions<p>* qmail uses djb's string library<p>* memcached uses ASCIIZ strings and libc string functions<p>It's probably good to be comfortable with both approaches.<p>I don't know that you actually made this claim, but you seem to have given people here the impression that you believe functions that work with ASCIIZ strings should be bulletproofed to handle non-ASCIIZ inputs. I couldn't agree with that argument, especially as an argument about K&#38;R's code being rusty.<p>People here are jumpy though (they're commenting, like me, mostly because they're bored).<p>Looking forward to more examples from the book.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3450792 href="vote?for=3450792&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450792></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=aaronblohowiak">aaronblohowiak</a> 25 days ago  | <a href="item?id=3450792">link</a></span></div><br>
<span class="comment"><font color=#000000>Redis strings are actually length prefixed null terminated strings</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3451808 href="vote?for=3451808&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451808></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3451808">link</a></span></div><br>
<span class="comment"><font color=#000000>The string data type in the db? Because Redis itself uses char-stars all over the place, with the libc string functions.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3452537 href="vote?for=3452537&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3452537></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=aaronblohowiak">aaronblohowiak</a> 25 days ago  | <a href="item?id=3452537">link</a></span></div><br>
<span class="comment"><font color=#000000>Hmm, reading the source it looks like he is using His sds string library, which has Len, size and a asciiz char* member.  When last I checked he does pass the char* around (because it is null terminated) but he also sometimes will do pointer math to get back to the sds<i></font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3452920 href="vote?for=3452920&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3452920></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3452920">link</a></span></div><br>
<span class="comment"><font color=#000000>You're right; I was reacting to the count of char\s+star and snprintf calls, but only fair to chalk Redis up among the packages I have that rely on a high-level string library.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3450271 href="vote?for=3450271&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450271></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3450271">link</a> | <a href="item?id=3448091">parent</a> | on: <a href="item?id=3447610">Don't write on the whiteboard</a></span></div><br>
<span class="comment"><font color=#000000>Wow, couldn't disagree more. "Ask for paper" may be the single most pragmatic and useful interview tip I've ever gotten on this site. I grinned ear-to-ear when I realized that was the point he was making.<p>The Project Euler stuff I could go either way on, but I thought this was such a great post.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3450175 href="vote?for=3450175&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450175></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3450175">link</a> | <a href="item?id=3449967">parent</a> | on: <a href="item?id=3448573">Deconstructing "K&R C"</a></span></div><br>
<span class="comment"><font color=#000000>And those dated, buggy, and unstylish examples would be?</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3453531 href="vote?for=3453531&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453531></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=bonzoesc">bonzoesc</a> 25 days ago  | <a href="item?id=3453531">link</a></span></div><br>
<span class="comment"><font color=#000000>I dug out my 29th printing copy for this :)<p>Dated: the "Hello world" on page 6 produces warnings when compiled "&#62; gcc -ansi -o hello hello.c -Wall" c.f. <a href="http://c-faq.com/ansi/maindecl.html" rel="nofollow">http://c-faq.com/ansi/maindecl.html</a><p>Buggy but only to a pedant with infinite time: the word count on page 18 that uses a `double` which will run out of accuracy once you count more words than there are atoms in the universe. (	`double toot = 1000000000000000000; toot++;` what is the approximate value of toot?)<p>Buggy by omission: Section 5.5 (on page 104) doesn't really go into the hazards of C strings, and the text's implementation of strcpy when using strings from unfriendly places (public wifi, quicktime files) can turn the interesting kind of nasty if you hammer on it enough.<p>Unstylish: brace-less if statements in many examples; a two-line one on page 110, for example.<p>I worked as a contractor in a C shop for several months a few years back, and I kind of see what happens when you code K&#38;R-style instead of extremely defensively and conservatively. For example, the strcpy on page 106 is cute, but is it going to be as maintainable as the naïve version the previous page, or the hypothetical (unless I just failed to find it) LCTHW known-length string copy function?</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3453737 href="vote?for=3453737&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453737></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3453737">link</a></span></div><br>
<span class="comment"><font color=#000000>1. You're singling out the first "hello world" program in the book which is making an effort to show C using the fewest concepts necessary; flip elsewhere in the book and notice the other main() functions return int values. (The default "int" is C89; the "warning" is for C99; the second edition of K&#38;R is ANSI C89, not C99).<p>2. First the nit misses the spirit of the example which is simply to demonstrate that "double" has higher precision than the fixnum "long" type; second, calling it a bug misses the fact that text explicitly does <i>not</i> say you can use it to count arbitrary strings; as the text says, it depends.<p>3. You're calling "buggy by omission" an implementation of strcpy not substantially different from BSD's libc. K&#38;R's is, in fact, how you would write strcpy(). That strcpy() doesn't handle hostile strings is irrelevant; you're not intended use strcpy() on hostile strings.<p>4. Hard to fathom how one criticizes a book on C for braceless "if"s. We could go toe to toe on high-quality C programs and whether they ever use them; nginx, for example, avoids them; dovecot doesn't. Both are exceptionally high quality C codebases.<p>Not that you have anything to prove to me, but I reject all your examples, and think you were too cavalier about judging K&#38;R.<p>But I appreciate the response (and thus the opportunity to piously respond to it). :)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3454046 href="vote?for=3454046&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3454046></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=bonzoesc">bonzoesc</a> 24 days ago  | <a href="item?id=3454046">link</a></span></div><br>
<span class="comment"><font color=#000000>&#62; Not that you have anything to prove to me, but I reject all your examples, and think you were too cavalier about judging K&#38;R.<p>I don't think it's necessarily cavalier. If I was asked to review code that aligned with the K&#38;R examples today, I'd kick it back.<p>I'd much prefer a codebase that compiles with -Wall -Werror today than one that doesn't, one that doesn't use floats for integers, one that doesn't use strcpy even from a literal string to the heap, and one that doesn't put a braceless `if` inside a braceless `for`, and I suspect you would too.<p>It's a good book to learn 1988 C, and if you're just going to learn it for your classes and go off into the exciting world of Java and C# it's probably fine, but it's not the right book to teach someone to write production-quality C.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3454089 href="vote?for=3454089&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3454089></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 24 days ago  | <a href="item?id=3454089">link</a></span></div><br>
<span class="comment"><font color=#000000>If you reject code that, for instance, strcpy's string literals (because they could have used strncpy to be extra safe), you're rejecting most professional code today.<p>I <i>wish</i> it was a best practice that strcpy() was never used, because it would make static source code analysis a lot easier: see strcpy()? Flag it! But no: lots of excellent C code properly relies on the assumption that string literals don't change their size at runtime.<p>Similarly, yours is a stylistic standard for braces that <i>rejects OpenBSD KNF</i>. Good luck with that. You're entitled to an opinion and, on your own dev teams, it's perfectly reasonable to demand consistency with an "always use braces" style. But it's not reasonable to call style fouls on other people's code that adheres to style(9).<p>Really strong disagree that K&#38;R isn't a good first book for writing production C. I could go on &#38; on, but since I'm echoing the commanding majority of all C programmers in sharing that sentiment, there's probably no need.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3450579 href="vote?for=3450579&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450579></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zedshaw">zedshaw</a> 25 days ago  | <a href="item?id=3450579">link</a></span></div><br>
<span class="comment"><font color=#000000>Well when my book is finished you can come back read all of the ones I find, but demanding that someone go through the book and write down every example they found to answer your one-liner is a bit unfair.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3450607 href="vote?for=3450607&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450607></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3450607">link</a></span></div><br>
<span class="comment"><font color=#000000>I wasn't replying to you, and wouldn't have written that reply to you. You wrote a whole chapter of a book about your thoughts on K&#38;R. You obviously read it.<p>I'm guessing the person I replied to has zero, because people who cavalierly call K&#38;R "dated" and "buggy" probably haven't read it. But Bryce has an interesting background. I could be wrong. Calculated risk. Would love an answer from him.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3450169 href="vote?for=3450169&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450169></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3450169">link</a> | <a href="item?id=3449820">parent</a> | on: <a href="item?id=3448573">Deconstructing "K&R C"</a></span></div><br>
<span class="comment"><font color=#000000>It's way worse than an extra byte, or the offset of 1 byte for pointers; it also means you need a whole copy of every substring with its own length delimiter, and can't tokenize in place.<p>C code gets into just as much trouble with length-delimited data structures as it does with ASCIIZ; ASCIIZ is a red herring. People have declared over and over again that it's the single worst decision in C and the cause of every buffer overflow. But if you look over the past 10 years or so, memcpy() has caused just as much chaos, and we're just as likely to find an overflow or integer mistake in binary protocols (where NUL-termination is nonsensical) as we are in ASCII protocols.<p>"Leaving the cleanup to the OS" works <i>everywhere</i>, on every modern system, and lots of programs would benefit from shedding a lot of useless bookkeeping and just treating the process address space as an arena to be torn down all at once. But I think the point the author was trying to make is, when you code that way, you make it impossible to hoist your code into another program as a module. Which is true; if it's likely you're writing a library as well as a program, you don't get to take the easy way out.<p>You can still write a 100 line arena allocator to pretend like you can, though. :)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3450563 href="vote?for=3450563&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450563></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zedshaw">zedshaw</a> 25 days ago  | <a href="item?id=3450563">link</a></span></div><br>
<span class="comment"><font color=#000000>I partially agree with you, but in a different way.  I feel that the real problem is the OS doesn't give code access to its own internal accounting of allocated memory.  It already knows the size of any heap chunk you make, so why can't we ask it?  In most C code we're carrying around either a null terminator (which can get clobbered) or a whole integer for the size.<p>Instead, there should be a way to ask the OS "how big is the crap this pointer is pointed at" and get a valid answer.  Other useful things would be "how far inside the chunk pointed at by X is the pointer Y?" Or, "will pointing Y at J inside X cause an error?"<p>And it wouldn't even need to be the OS, just the allocator, probably a few macros, etc.  But, for now I have to show people how to write bug resistant C code so this is the best way so far.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3450621 href="vote?for=3450621&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450621></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3450621">link</a></span></div><br>
<span class="comment"><font color=#000000>Part of the problem here is that the allocator doesn't need to know how big the crap the pointer is pointing at is; it only needs to know that the crap is smaller thank the chunk it allocated.<p>If you're going to teach people something unorthodox about C programming, writing custom allocators would probably be a great one. In more than one job I've crushed optimization problems on code written by people way smarter than me simply by knowing to profile allocation and replace malloc.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3451987 href="vote?for=3451987&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451987></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=scott_s">scott_s</a> 25 days ago  | <a href="item?id=3451987">link</a></span></div><br>
<span class="comment"><font color=#000000>Hmm. The question "what is the size of memory that <i>x</i> points to?" is cheap to figure out, because free needs to do it anyway. You couldn't use a macro to do it - it would need to access the internal data structures of the allocator - but it's easy to do. The other questions could be macros that called the first function.<p>What are the use cases for these functions? What bugs would they prevent?</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3452012 href="vote?for=3452012&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3452012></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3452012">link</a></span></div><br>
<span class="comment"><font color=#000000>Worth pointing out again: the size of the chunk allocated for a particular data structure does not give you the precise bounds of the data structure; odds are, the chunk is slightly larger than the structure.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3452265 href="vote?for=3452265&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3452265></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=scott_s">scott_s</a> 25 days ago  | <a href="item?id=3452265">link</a></span></div><br>
<span class="comment"><font color=#000000>I wrote a response explaining why, if you know <i>x</i> then you must know <i>y</i>, but then I realized you were talking about knowing <i>y</i> and learning <i>x</i>. Yes, I agree. I'm not sure which context (knowing the <i>actual</i> size of the memory chunk, which is easy, or knowing the <i>used</i> size of the memory chunk, which is not easy) Zed was talking about.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3453695 href="vote?for=3453695&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453695></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=Roboprog">Roboprog</a> 25 days ago  | <a href="item?id=3453695">link</a></span></div><br>
<span class="comment"><font color=#000000>That's a hell of a good idea.  As somebody pointed out, it might not stop you from corrupting neighboring items in an array or structure, but it would let you find the size of an array allocated by itself, AND, it would stop you from corrupting the heap itself!</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3453747 href="vote?for=3453747&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453747></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3453747">link</a></span></div><br>
<span class="comment"><font color=#000000>If you're concerned about corrupting the heap, use an allocator hardened against heap corruption. The default WinAPI allocator, even for optimized production code, is hardened that way. Userland code doesn't need to do anything to get the feature, which is as it should be, because people who write userland code don't know enough to defend the heap against memory corruption.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3453705 href="vote?for=3453705&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453705></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=Roboprog">Roboprog</a> 25 days ago  | <a href="item?id=3453705">link</a></span></div><br>
<span class="comment"><font color=#000000>I would happily trade C ASCIIZ strings for Pascal/Perl/Java out of band length indicated strings, even at the cost of those edge cases.  Especially if there were a way to internalize immutable string data, and share the bytes of common fragments.  (this of course doesn't work well if you plan on modifying the string data)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3453768 href="vote?for=3453768&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453768></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3453768">link</a></span></div><br>
<span class="comment"><font color=#000000>So make the trade. I'm sorry, I can see I'm communicating some kind of disdain for alternate string representations, but every C programmer I know --- every single one of them --- has used some form of counted string at some point.<p>I'm just saying there's a reason the default in C is ASCIIZ. Most of what you do with strings is lightweight; compare 'em, search 'em, tokenize 'em, copy 'em. For that 80% of use cases, ASCIIZ is superior.<p>Should ANSI C libc provide a heavyweight counted string alternative? Sure, I think so; in fact, it's possible that the only reason it doesn't is that it would take 300 years to resolve all the disputes about exactly what such a library should like like, since every professional C programmer has their own now.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3454048 href="vote?for=3454048&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3454048></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=Roboprog">Roboprog</a> 24 days ago  | <a href="item?id=3454048">link</a></span></div><br>
<span class="comment"><font color=#000000>Fair enough.  Started something like that, not sure I'll ever finish it, though  :-(<p><a href="https://github.com/roboprog/buzzard/blob/master/bzrt/src/bzrt_bytes.h" rel="nofollow">https://github.com/roboprog/buzzard/blob/master/bzrt/src/bzr...</a></font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3450157 href="vote?for=3450157&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450157></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3450157">link</a> | <a href="item?id=3450119">parent</a> | on: <a href="item?id=3448573">Deconstructing "K&R C"</a></span></div><br>
<span class="comment"><font color=#000000>It's not just that the to/from is a hassle, it's also that you have to deeply understand the gotchas of ASCIIZ strings to safely do that bridging at all --- so pretending it doesn't exist is probably not a good teaching strategy. (I have no opinion about the article and am only commenting on this thread because I like C).</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3450525 href="vote?for=3450525&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450525></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zedshaw">zedshaw</a> 25 days ago  | <a href="item?id=3450525">link</a></span></div><br>
<span class="comment"><font color=#000000>I do <i>not</i> pretend anything about null-terminated strings in the book.  In fact, I have many exercises and assignments where they use Valgrind to buffer overflow C strings repeatedly and don't introduce bstring until much later.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3450625 href="vote?for=3450625&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450625></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3450625">link</a></span></div><br>
<span class="comment"><font color=#000000>Sorry, I haven't read your book, meant to be clear that I was talking in the abstract, but I can see after rereading I wasn't clear enough.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3449409 href="vote?for=3449409&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449409></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3449409">link</a> | <a href="item?id=3449334">parent</a> | on: <a href="item?id=3448573">Deconstructing "K&R C"</a></span></div><br>
<span class="comment"><font color=#000000>Production code is supposed to define away the assertions. It is an actual error to manage important program state with asserts.<p>(That doesn't make these particular asserts an error).</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3449388 href="vote?for=3449388&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449388></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3449388">link</a> | <a href="item?id=3449077">parent</a> | on: <a href="item?id=3449077">Web programs written in C++ are no big deal</a></span></div><br>
<span class="comment"><font color=#000000>Writing C++ code that works reliably in a benign setting is not a big deal. With the right libraries, it is almost as easy and perhaps only a little slower than writing in a high-level language; you can't, for instance, really believe that everyone who writes a popular iOS application is a solid bare-metal C programmer.<p>But writing reliable C++ code that works under adversarial conditions is <i>very hard</i>; hard enough that the best C programmers in the world have track records like "only one theoretically-exploitable memory corruption vulnerability in the release history", and quite a few people who set out with "no vulnerabilities" in their project charter end up with <i>way</i> worse records.<p>I've found over the last couple years that one way to get C/C++ code fit into a web application is via "nosql" databases, particularly Redis; let something like Ruby/Rack or Python/WSGI or Java Servlets soak up the hostile HTTP traffic, and use it to drive an async API over Redis.<p>The less C/C++/ObjC code you have talking to an adversary, the better off you are.<p>I'm a C/C++ programmer; C is my first language, from when I was a teenager. I respect C programmers. But if I was interviewing a developer and they told me their gut was to write a C program to do something a Rails program would normally do, and it wasn't an exceptionally specific circumstance, I would think less of them.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3449506 href="vote?for=3449506&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449506></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=pork">pork</a> 25 days ago  | <a href="item?id=3449506">link</a></span></div><br>
<span class="comment"><font color=#000000>&#62; "only one theoretically-exploitable memory corruption vulnerability in the release history",<p>I presume you mean qmail [1]<p>[1] <a href="http://cr.yp.to/qmail/guarantee.html" rel="nofollow">http://cr.yp.to/qmail/guarantee.html</a></font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449527 href="vote?for=3449527&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449527></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3449527">link</a></span></div><br>
<span class="comment"><font color=#000000>Yes; qmail had a (disputed) LP64 integer overflow.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3449502 href="vote?for=3449502&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449502></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=bri3d">bri3d</a> 25 days ago  | <a href="item?id=3449502">link</a></span></div><br>
<span class="comment"><font color=#000000>In this worldview, wouldn't the C programmers writing your language runtime have the same poor track record when it comes to security? And wouldn't the runtime itself be a substantially higher-value target for attackers?<p>I, too, would look at someone strangely if they told me they were going to write a C application where I'd use a Rails one, but security certainly wouldn't be the first reason on my mind.<p>As a postscript, I really like the idea of putting C/C++ apps behind a message bus, as decoupled from the web end as possible. I've had great luck using C++ for performance-critical services behind a Rails frontend talking to Redis (I've also used AMQP via RabbitMQ, but I found that to have a high enterprise brokered pain to value ratio).</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449530 href="vote?for=3449530&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449530></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3449530">link</a></span></div><br>
<span class="comment"><font color=#000000>They <i>do</i> have a poor track record with the language runtime.<p>You <i>should</i> be concerned about the quality of your language runtime.<p>MRI, for instance, has had many memory corruption flaws that were plausibly exposed to hostile input. When security is a priority, I advise using JRuby (it helps that JRuby is better than MRI anyways).<p>But either way: language runtimes for mainstream languages are high-priority targets. Your C code is not. You will not learn the worst problems in your C code until long after it's been deployed.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449539 href="vote?for=3449539&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449539></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=icebraining">icebraining</a> 25 days ago  | <a href="item?id=3449539">link</a></span></div><br>
<span class="comment"><font color=#000000>Linus' Law. The language runtime is shared between thousands or millions of users and has many more contributors than your single project, hence any big security bugs it might have had are probably fixed by now, or at least will way faster than you could fix yours.<p><i>And wouldn't the runtime itself be a substantially higher-value target for attackers?</i><p>That depends, but relying on security through obscurity isn't usually a very good choice.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3449732 href="vote?for=3449732&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449732></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=16s">16s</a> 25 days ago  | <a href="item?id=3449732">link</a></span></div><br>
<span class="comment"><font color=#000000>Parrot alert!<p><i>relying on security through obscurity isn't usually a very good choice.</i><p>Real-world alert!<p>Camouflage paint works for tanks.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3449828 href="vote?for=3449828&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449828></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=icebraining">icebraining</a> 25 days ago  | <a href="item?id=3449828">link</a></span></div><br>
<span class="comment"><font color=#000000>In the "real-world", camouflage paint isn't used <i>instead</i> of heavy armor, which is what is being proposed (using a much less tested piece of code instead of a well known runtime).<p>Sure, if you can afford to throw the same number of man-years (of both developers and white hackers) at your proprietary codebase as are thrown at the runtime of a popular language, then great, you can have the cake and eat it too, just like the tank builders.<p>Since most people can't afford that, they have to choose between camouflage paint and an armor. I don't know about you, but I'd rather be in the bullet proof tank than on the one built with balsa wood, regardless of its paint.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3449757 href="vote?for=3449757&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449757></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jerf">jerf</a> 25 days ago  | <a href="item?id=3449757">link</a></span></div><br>
<span class="comment"><font color=#000000><i>Relying</i>.<p>By definition, if we're talking about a <i>tank</i>, that's merely one layer of many. Obscurity can be a fine one layer of many. It had better not be <i>the</i> layer such that you are <i>relying</i> on, though.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3449823 href="vote?for=3449823&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449823></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=numeromancer">numeromancer</a> 25 days ago  | <a href="item?id=3449823">link</a></span></div><br>
<span class="comment"><font color=#000000>So do very thick firewalls.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449563 href="vote?for=3449563&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449563></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=nl">nl</a> 25 days ago  | <a href="item?id=3449563">link</a></span></div><br>
<span class="comment"><font color=#000000><i>In this worldview, wouldn't the C programmers writing your language runtime have the same poor track record when it comes to security?</i><p>This is true. But I think it is reasonable to expect a good C/C++ programmer who already understands web security to have the mental model to write secure code in (say) Ruby.<p><i>And wouldn't the runtime itself be a substantially higher-value target for attackers?</i><p>Yes - popular runtimes are some of the most heavily attacked  pieces of code around. This has benefits as well as costs...</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3449516 href="vote?for=3449516&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449516></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=akg">akg</a> 25 days ago  | <a href="item?id=3449516">link</a></span></div><br>
<span class="comment"><font color=#000000>I'm not sure I understand why one particular language would lend itself to more vulnerability than another. The less skilled someone is at a particular language, the more bugs/vulnerabilities he is likely to produce. It is a function of technical skill rather than a quality of the language.<p>For example a Ruby interpreter or a Java runtime that you trust to handle all your HTTP requests are prominently written in C/C++.<p>I think what makes popular packages like Ruby/Java/Rails (etc.) more secure is the sheer number of users they have. Those technologies have been hammered out over several projects and by a plethora of users and developers. Writing a component that rivals that number of interactions is tough, but certainly doable.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449535 href="vote?for=3449535&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449535></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3449535">link</a></span></div><br>
<span class="comment"><font color=#000000>There's one (mainstream) C Ruby that needs to be audited. But <i>every</i> C CGI program needs to be audited.<p>C programs are susceptible to memory corruption. Programs written in practically every mainstream high level language are not susceptible to those problems (until they start using third-party C extensions). That's the security win of not using C code.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449531 href="vote?for=3449531&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449531></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=simonw">simonw</a> 25 days ago  | <a href="item?id=3449531">link</a></span></div><br>
<span class="comment"><font color=#000000>"I'm not sure I understand why one particular language would lend itself to more vulnerability than another."<p><a href="http://en.wikipedia.org/wiki/Buffer_overflow" rel="nofollow">http://en.wikipedia.org/wiki/Buffer_overflow</a><p>From that page: "Programming languages commonly associated with buffer overflows include C and C++, which provide no built-in protection against accessing or overwriting data in any part of memory and do not automatically check that data written to an array (the built-in buffer type) is within the boundaries of that array."</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3449816 href="vote?for=3449816&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449816></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=akg">akg</a> 25 days ago  | <a href="item?id=3449816">link</a></span></div><br>
<span class="comment"><font color=#000000>I would call that a programmer error. The language certainly does make it harder to write "safe" code, but it is certainly doable.<p>I guess my point is that the tools/libraries/frameworks on top of the language are what make it useful or not useful, independent of the language itself. For example, writing a web app in Ruby may not help you against SQL injection (<a href="http://en.wikipedia.org/wiki/SQL_injection" rel="nofollow">http://en.wikipedia.org/wiki/SQL_injection</a>) unless you have a well designed query language on top of that.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3449844 href="vote?for=3449844&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449844></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3449844">link</a></span></div><br>
<span class="comment"><font color=#000000>Everyone calls it programmer error. But when you make the same error of copying arbitrary-sized inputs from attackers into a Java program, you do not enable that attacker to upload their own code into the JVM process and run it.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3451023 href="vote?for=3451023&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451023></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=akg">akg</a> 25 days ago  | <a href="item?id=3451023">link</a></span></div><br>
<span class="comment"><font color=#000000>But doesn't the use of Java's JNI invalidate any security the JVM offers? As far as I know, any protections the JVM puts up are invalidated once you inject native code, which would potentially enable an attacker to potentially inject malicious code that hijacks the JVM. Then again, one could argue that the JNI is no longer a "Java" program.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=240></td><td valign=top><center><a id=up_3451815 href="vote?for=3451815&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451815></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3451815">link</a></span></div><br>
<span class="comment"><font color=#000000>Yes, when you write C code and attach it to JVM processes, that puts the JVM process at risk. More C code, more problems.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3450837 href="vote?for=3450837&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450837></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=dextorious">dextorious</a> 25 days ago  | <a href="item?id=3450837">link</a></span></div><br>
<span class="comment"><font color=#000000>"""I would call that a programmer error. The language certainly does make it harder to write "safe" code, but it is certainly doable."""<p>Everything is "certainly doable" in a turing-complete way, but that fact has not mattered at all in the evolution of programming languages.<p>It doesn't matter if it's "certainly doable", what matters is how easy it is.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449546 href="vote?for=3449546&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449546></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=nl">nl</a> 25 days ago  | <a href="item?id=3449546">link</a></span></div><br>
<span class="comment"><font color=#000000>Things like memory protection by default <i>do</i> make some languages safer than others.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3449799 href="vote?for=3449799&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449799></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=akg">akg</a> 25 days ago  | <a href="item?id=3449799">link</a></span></div><br>
<span class="comment"><font color=#000000>Yes, however, there are libraries in place that can circumvent some of these issues: e.g., boost::shared_ptr in C++.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3449851 href="vote?for=3449851&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449851></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3449851">link</a></span></div><br>
<span class="comment"><font color=#000000>No, Boost shared_ptr exacerbates the issue by creating a second regime of reference counting that, if contravened anywhere in the program (for instance, in any third-party piece of library code, which every C++ program of any real size is replete with) creates use-after-free conditions.<p>I invite you to continue coming up with examples of ways to reliably mitigate memory corruption flaws in C/C++ programs, because I enjoy this topic very much, but as your attorney in this matter I have to advise you that you're going to lose the argument. :)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3451056 href="vote?for=3451056&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451056></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=akg">akg</a> 25 days ago  | <a href="item?id=3451056">link</a></span></div><br>
<span class="comment"><font color=#000000>After doing some research on the topic, I will have to say that I concede my point. ;-)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3451072 href="vote?for=3451072&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451072></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=roel_v">roel_v</a> 25 days ago  | <a href="item?id=3451072">link</a></span></div><br>
<span class="comment"><font color=#000000>I agree with you on the gist of your argument (I think), but there are 'ways to reliably mitigate memory corruption flaws in C/C++ programs'. For example, using std::string rather than malloc()'ing a char* every time you do something that works with strings is certainly a way to reliably mitigate memory corruption flaws in C++.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=240></td><td valign=top><center><a id=up_3451832 href="vote?for=3451832&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451832></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3451832">link</a></span></div><br>
<span class="comment"><font color=#000000>True as far as it goes; std::string is safer than libc strings. If all your program does is manipulate strings, and not marshaled binary data structures or protocols, and your data structures are simple and you're very careful with your iterators (which themselves often decompose to pointers) and your object lifecycles are simple enough that you can reliably free things and know you're not going to accidentally touch the memory later, and-and-and, you can write a safe C++ program.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3450470 href="vote?for=3450470&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450470></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=SamReidHughes">SamReidHughes</a> 25 days ago  | <a href="item?id=3450470">link</a></span></div><br>
<span class="comment"><font color=#000000>Every boost::shared_ptr I see is a cringe-inducing experience.  It's not just the atomic memory operation that happens whenever you copy it, it's the programmer who thought that he could just put things in a boost::shared_ptr and it would solve his problems.  Now the code is less readable, because you don't know what the lifetime of your resources are!  The worst thing is when they get shared across threads, and suddenly you don't know what thread your object's going to be destructed on.<p>One better alternative to a shared_ptr is a noncopyable shared pointer type.  You have to explicitly copy it with a call like<p><pre><code>    x.copy_from(y);
</code></pre>
That this makes the use of reference counted objects more verbose and uncomfortable is not a downside.<p>Really this should be a noncopyable version of intrusive_ptr, not shared_ptr.  Either the object is owned by references on multiple threads and you'll want to be careful about what thread you destroy it from, and perhaps then you'd want to send a release message over some message queue system, or it's a single threaded object and you don't need the overhead of atomic memory operations.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3450877 href="vote?for=3450877&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450877></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=ggchappell">ggchappell</a> 25 days ago  | <a href="item?id=3450877">link</a></span></div><br>
<span class="comment"><font color=#000000>&#62; Now the code is less readable, because you don't know what the lifetime of your resources are!<p>You're certainly making a valid point; however, as far as <i>how</i> <i>important</i> this is, the experience of a lot of people out there points in the other direction.<p>Consider: the lifetime of a Python object is essentially the same as that of a C++ dynamic object owned by a shared_ptr. But you don't see Python programmers complaining that they can't figure out when their objects are going away. In Java it's even worse; an object's lifetime is pretty much whatever the JVM thinks it ought to be. I <i>have</i> seen complaints about this, but not many, and the JVM's reputation as a platform for serious languages remains pretty strong.<p>On the other hand, memory leaks in C (and C++) programs have been a major thorn in all our sides for decades.<p>So, yes, when you get assured destruction by using an object whose lifetime is managed for you, you <i>do</i> lose something. But the experience of programmers all over strongly suggests to me that, for most applications, what you get, is much more valuable than what you lose.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=240></td><td valign=top><center><a id=up_3451083 href="vote?for=3451083&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451083></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=roel_v">roel_v</a> 25 days ago  | <a href="item?id=3451083">link</a></span></div><br>
<span class="comment"><font color=#000000>At the risk of sounding like flamebait, it's because Python and Java developers don't know what they are missing without deterministic destructing. Of course there are way to 'code around' it, but knowing the exact lifetime of objects is very often very useful, and often makes for much easier to understand code and easy ways to avoid resource leaks.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=280></td><td valign=top><center><a id=up_3451133 href="vote?for=3451133&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451133></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=nl">nl</a> 25 days ago  | <a href="item?id=3451133">link</a></span></div><br>
<span class="comment"><font color=#000000>try..finally blocks have 80% (or more?) of the advantages of deterministic destructing without the costs, especially for avoiding resource leaks.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=320></td><td valign=top><center><a id=up_3451666 href="vote?for=3451666&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451666></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=roel_v">roel_v</a> 25 days ago  | <a href="item?id=3451666">link</a></span></div><br>
<span class="comment"><font color=#000000>Yes, that's true, but at the cost of syntactic noise. It's a preference, and one gets used to it I guess, but to me all the try blocks are harder to read than code where variables have a fixed lifetime, so where you in many cases can avoid the extra indent level.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=320></td><td valign=top><center><a id=up_3453083 href="vote?for=3453083&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453083></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=lelele">lelele</a> 25 days ago  | <a href="item?id=3453083">link</a></span></div><br>
<span class="comment"><font color=#000000>What about objects who are referenced by more than one object, and which are linked to resources? try... finally blocks are just a different way of freeing your resources at the end of a block, and won't help with objects which outlive the block they are guarding.<p>Actually, here is your choice: either you'll have to manage every kind of resource except memory (garbage collected languages), or you'll have to manage only memory (C++).</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=240></td><td valign=top><center><a id=up_3453460 href="vote?for=3453460&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453460></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=SamReidHughes">SamReidHughes</a> 25 days ago  | <a href="item?id=3453460">link</a></span></div><br>
<span class="comment"><font color=#000000>&#62; You're certainly making a valid point; however, as far as how important this is, the experience of a lot of people out there points in the other direction.<p>That's because I'm talking about C++ and you've somehow decided to talk about something unrelated.  Python and Java programmers still care about all resources that aren't object lifetimes.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3451060 href="vote?for=3451060&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451060></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=akg">akg</a> 25 days ago  | <a href="item?id=3451060">link</a></span></div><br>
<span class="comment"><font color=#000000>After doing some thorough research on the topic, I would like to say that I concede my point about the vulnerabilities of C/C++. Thanks tptacek.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3451838 href="vote?for=3451838&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3451838></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3451838">link</a></span></div><br>
<span class="comment"><font color=#000000>Happy to help! :)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3449667 href="vote?for=3449667&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449667></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=doe88">doe88</a> 25 days ago  | <a href="item?id=3449667">link</a></span></div><br>
<span class="comment"><font color=#000000>&#62; I've found over the last couple years that one way to get C/C++ code fit into a web application is via "nosql" databases, particularly Redis; let something like Ruby/Rack or Python/WSGI or Java Servlets soak up the hostile HTTP traffic, and use it to drive an async API over Redis.<p>I'm sorry forgive my ignorance can you explain me a bit more what you mean by "async api over Redis"? I'm always genuinely interested in understanding good patterns especially given your experience in security. Thanks!</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449827 href="vote?for=3449827&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449827></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jbester">jbester</a> 25 days ago  | <a href="item?id=3449827">link</a></span></div><br>
<span class="comment"><font color=#000000>Not the GP, but the general principal is to use Redis as a task queueing system.  The front-end puts a task into a redis queue.  One or more C++ programs are waiting on the queue(s) and execute the given task (like a large DB insert).  If results are needed they can be communicated back to the front-end.  The front-end can poll for the result or use pub/sub messaging.<p>This gets you a number of benefits: separation of the front-end logic and the back-end logic, better scalability - there may be a bunch of workers on distributed among different machines, and security - the C++ programs aren't <i>as</i> worried about unvalidated input since their input comes from the front-end.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3449857 href="vote?for=3449857&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449857></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3449857">link</a></span></div><br>
<span class="comment"><font color=#000000>The Redis interface is also so simple that it's very easy to hook up C code to it, and Redis is somewhat "typed", which reduces the amount of parsing you have to do.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3450089 href="vote?for=3450089&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450089></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=mikecsh">mikecsh</a> 25 days ago  | <a href="item?id=3450089">link</a></span></div><br>
<span class="comment"><font color=#000000>Can your recommend any particularly good resources/tutorials or further information on this? Thanks!</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3450183 href="vote?for=3450183&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3450183></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sausagefeet">sausagefeet</a> 25 days ago  | <a href="item?id=3450183">link</a></span></div><br>
<span class="comment"><font color=#000000>The web app I have been working on has the same architecture.<p>1. A request comes in
2. Request handler parses the request
3. Handler determines which Queue the request should go into based off the URL
4. Request handler queues the request as well as how whoever handles it can get back to them
5. Waits for response<p>There are then multiple workers living possibly on other machines listening on the queue.  They handle the request and return a response to the original request handler and pull the next bit of work off the queue.<p>I like this because I feel like it is rather robust.  I use a STOMP message queue which is very trivial to hook up other languages to.  It is fast enough for my needs.  It lets me do simple things like specify how many queued items a handler can handle concurrently.  My web app is then broken into components that each run independently.  They can run in the same process or be split into separate processes or even across computers.  My web app is not particularly high demand but we run it on fairly light resources so the queuing also keeps our app from becoming overwhelmed if a lot of requests happen at once.  They just get queued and a handler will get to it when it can.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3461819 href="vote?for=3461819&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3461819></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=kragen">kragen</a> 23 days ago  | <a href="item?id=3461819">link</a></span></div><br>
<span class="comment"><font color=#000000>While I mostly agree with your primary point --- that C and C++ are extremely prone to memory corruption vulnerabilities --- I think there's an important distinction you're glossing over here, between C and C++/ObjC.<p>Both C++ and ObjC have a string class and containers in the standard library, and support for some automatic memory management in the language.  This turns out to make a big difference in practice in reducing those vulnerabilities.  There are people in this thread claiming that they do as good a job in reducing those vulnerabilities as using Java or Ruby or Python.  I can't really evaluate that claim, but it seems plausible to me.  Barely.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3463166 href="vote?for=3463166&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3463166></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 22 days ago  | <a href="item?id=3463166">link</a></span></div><br>
<span class="comment"><font color=#000000>Some things to remember:<p>* std::string (or NSMutableString) eliminates the stdlibc strxxx() vulnerabilities --- iff you use them exclusively. But lots of C++ code (and, especially, ObjC code) drops to char-star strings routinely.<p>* <i>Most</i> C++ code still uses u_char-star for binary blobs. ObjC has (to its credit) NSMutableData, but there's still u_char-star handling code there too (I also feel like --- but can't back up with evidence --- ObjC code is more likely to call out to C libraries like zlib).<p>* Both C++ and ObjC have error-prone "automatic" memory management: shared_ptr and retain/release, respectively. shared_ptr is risky because every place it comes into contact with uncounted pointers has to be accounted for; retain/release because it's "manu-matic" and easy to make mistakes. In both cases, you can end up in situations where memory is released and pointers held to it, which is a situation morally equivalent to heap overflows.<p>No, I don't think C++ and ObjC do an equivalent job in reducing memory corruption flaws. The MRI Ruby interpreter has had memory corruption issues (it being a big C program itself), but Ruby <i>programs</i> never have memory corruption issues (except in the native C code they call into). C++ and ObjC programs routinely do.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3453115 href="vote?for=3453115&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453115></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=lelele">lelele</a> 25 days ago  | <a href="item?id=3453115">link</a></span></div><br>
<span class="comment"><font color=#000000>"Why do C++ folks make things so complicated?": <a href="http://www.johndcook.com/blog/2011/06/14/why-do-c-folks-make-things-so-complicated/" rel="nofollow">http://www.johndcook.com/blog/2011/06/14/why-do-c-folks-make...</a></font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3453186 href="vote?for=3453186&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453186></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3453186">link</a></span></div><br>
<span class="comment"><font color=#000000>Kind of orthogonal. You'd face the same risks writing in C as in C++.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3453614 href="vote?for=3453614&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453614></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=lelele">lelele</a> 25 days ago  | <a href="item?id=3453614">link</a></span></div><br>
<span class="comment"><font color=#000000>Well, after starting using memory-management classes exclusively, and never again raw pointers, I have coded lots of C++ and I have never experienced any memory issues (leaks or access violations). I think C++ has issues much much worse than memory management.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3453844 href="vote?for=3453844&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453844></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 25 days ago  | <a href="item?id=3453844">link</a></span></div><br>
<span class="comment"><font color=#000000>Wow is it ever not my experience that C++ programs that avoid raw pointers don't have memory corruption issues. Note that my job involves looking at other people's C++ code, not just having opinions about my own, so I'm a bit more suspicious than most people.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3453952 href="vote?for=3453952&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3453952></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=lelele">lelele</a> 25 days ago  | <a href="item?id=3453952">link</a></span></div><br>
<span class="comment"><font color=#000000>Therefore your experience is that compilers and/or mainstream libraries are irredeemably broken, right? Because I can't think of any reason why your code should break havoc as long as you are following your language's and your libraries' guidelines and safe-code practices . And yes, I agree that's a PITA: I've ditched C++ for that reason. However, to me, as long as my profiler didn't show any memory leaks, and there were no crashes, then I assumed everything was fine. Maybe I was blessed in having discovered and mastered Design by Contract. And AFAIK, Python and Ruby interpreters are written in C... what makes them safer than average applications, then?</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=240></td><td valign=top><center><a id=up_3454998 href="vote?for=3454998&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3454998></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 24 days ago  | <a href="item?id=3454998">link</a></span></div><br>
<span class="comment"><font color=#000000>"Best practices" is a no-true-Scotsman argument. Any example I come up with of something that blows up a C++ program is going to contravene some best practice somewhere. A long time ago someone said buffer overflows were easy to avoid, and so I did a little math, counting up the revenues of companies that sold products that mostly mitigated the impact of buffer overflows. Billions and billions of dollars, lost to "inability to count numbers of bytes".<p>In any case, my pointier response to you is, "allocation lifecycle and use-after-free", which doesn't care how many layers of abstraction you wrap your pointers in.<p>"Irredeemably"? No, just very, very expensively. I suppose I should thank them.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3449230 href="vote?for=3449230&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449230></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 26 days ago  | <a href="item?id=3449230">link</a> | <a href="item?id=3449220">parent</a> | on: <a href="item?id=3448912">What if Insurers Didn't Pay for Crashes Caused by ...</a></span></div><br>
<span class="comment"><font color=#000000>It doesn't matter, because the most important reason you have insurance is to cover your liability to other people. If you rescind that coverage, you're screwing over the <i>other people</i>.<p>Obviously, if you harm other people by driving while intoxicated, it should immediately become sharply (perhaps untenably so) more expensive to insure you.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3449255 href="vote?for=3449255&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449255></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=aplusbi">aplusbi</a> 26 days ago  | <a href="item?id=3449255">link</a></span></div><br>
<span class="comment"><font color=#000000>I'm not arguing against insuring negligence, I'm arguing against calling negligence an accident.  It's a neat way of removing culpability.  "It was just an accident!"</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449773 href="vote?for=3449773&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449773></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=bunderbunder">bunderbunder</a> 25 days ago  | <a href="item?id=3449773">link</a></span></div><br>
<span class="comment"><font color=#000000>"An accident is an accident" was being said by the insurance specialist, and in reference to the insurer's responsibility.  In context, it was meant to say nearly the <i>opposite</i> of what you're inferring - something more along the lines of, "We can't pick and choose like that."  Which is true; doing so would defeat the whole point of mandatory liability insurance.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3449114 href="vote?for=3449114&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449114></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 26 days ago  | <a href="item?id=3449114">link</a> | <a href="item?id=3447626">parent</a> | on: <a href="item?id=3447028">The anatomy of a ripoff</a></span></div><br>
<span class="comment"><font color=#000000>Most young people would (a) be better served in the immediacy by the highest possible deductible and (b) once established in one, grow into middle-aged people who have set aside that deductible just by maintaining their HSA.<p>Converting to high-deductible is a problem if you're living at or above your means and are approaching middle age. But presumably regardless of your socioeconomic status, if you're just starting out in the market, given the choice between high- and low-, you're better served with high-.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3449222 href="vote?for=3449222&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449222></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=lurker14">lurker14</a> 26 days ago  | <a href="item?id=3449222">link</a></span></div><br>
<span class="comment"><font color=#000000>What's this about the HSA? I thought HSAs expire every year.</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3449242 href="vote?for=3449242&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449242></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 26 days ago  | <a href="item?id=3449242">link</a></span></div><br>
<span class="comment"><font color=#000000>No, that's an FSA. (Amusingly, someone voted this down; on HN, this is apparently a matter of opinion).</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3449093 href="vote?for=3449093&dir=up&whence=%2f%78%3f%66%6e%69%64%3d%66%79%57%36%74%7a%62%58%77%43"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3449093></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=tptacek">tptacek</a> 26 days ago  | <a href="item?id=3449093">link</a> | <a href="item?id=3447452">parent</a> | on: <a href="item?id=3447028">The anatomy of a ripoff</a></span></div><br>
<span class="comment"><font color=#000000>This misses the point of high-deductable insurance. It's not simply the idea that you should share more of the cost. The idea is, rather:<p>* Low-deductable insurance is inherently more expensive.<p>* The difference in premiums between low- and high- deductible insurance gradually funds your HSA.<p>* When you're young and you start your HSA, you also happen to be actuarially less likely to need the money going into your HSA, so it grows to cover your deductible (or, the savings gradually displaces whatever you deposited to start your HSA; whatever).<p>In the presumed common case, your deductible is fully funded by your HSA which is itself fully funded by the difference in premiums over a few years. That's all money that would simply have been remitted to your insurer if you had a low-deductible plan. The high-deductible plan leaves you better off.<p>(There's also the more meta point that health insurance exists to keep you from being bankrupted by e.g. appendicitis, and not as a cost-saving plan for routine care.)</font></span><p><font size=1><font color=#f6f6ef>-----</font></font></td></tr></table></td></tr><tr style="height:10px"></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td><img src="http://ycombinator.com/images/s.gif" height=1 width=14></td><td class="title"><a href="/x?fnid=bYYba8TF4L" rel="nofollow">More</a></td></tr></table></td></tr></td></tr><tr><td><img src="http://ycombinator.com/images/s.gif" height=10 width=0><table width="100%" cellspacing=0 cellpadding=1><tr><td bgcolor=#ff6600></td></tr></table><br>
<center><span class="yclinks"><a href="lists">Lists</a> | <a href="rss">RSS</a> | <a href="http://ycombinator.com/bookmarklet.html">Bookmarklet</a> | <a href="http://ycombinator.com/newsguidelines.html">Guidelines</a> | <a href="http://ycombinator.com/newsfaq.html">FAQ</a> | <a href="http://ycombinator.com/newsnews.html">News News</a> | <a href="item?id=363">Feature Requests</a> | <a href="http://ycombinator.com">Y Combinator</a> | <a href="http://ycombinator.com/apply.html">Apply</a> | <a href="http://ycombinator.com/lib.html">Library</a></span><br><br>
<form method=get action="http://www.hnsearch.com/search#request/all">Search: <input type=text name="q" value="" size=17></form><br>
</center></td></tr></table></center></body></html>